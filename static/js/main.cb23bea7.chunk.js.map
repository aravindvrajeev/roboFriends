{"version":3,"sources":["components/Card.js","components/Cardlist.js","container/robots.js","components/Search.js","components/Scroll.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","Cardlist","robots","map","num","i","components_Card","key","username","Search","searchVal","clasName","type","placeholder","onChange","Scroll","children","style","overflowY","height","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","SearchVal","event","setState","searchfield","target","value","state","_this$state","filterBots","filter","robot","toLowerCase","includes","components_Search","components_Scroll","components_Cardlist","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_container_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cb23bea7.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card = ({id, name, email}) =>{\r\n\treturn(\r\n\t\t\t<div className = ' bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t\t<img alt = 'Robots' src = {`https://robohash.org/${id}2?size=200x200 `}/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js'\t\t\r\n\r\nconst Cardlist = ({robots}) =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((num,i) => {\r\n\t\t\t\treturn(\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey = {num.id} \r\n\t\t\t\t\t\t\tid = {num.id}\r\n\t\t\t\t\t\t\tname = {num.name}\r\n\t\t\t\t\t\t\temail = {num.email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\t\r\n\t\t\t\r\n\t\t);\r\n\r\n}\r\n export default Cardlist;\r\n\t","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\r\nconst Search = ({searchVal})=>{\r\n\treturn(\r\n\t\t<div clasName = 'pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype = 'search'\r\n\t\t\t\tplaceholder='search Roboz'\r\n\t\t\t\tonChange = {searchVal}\r\n\t\t\t/>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\nexport default Search","import React from 'react';\r\n\r\nconst Scroll = ({children}) =>{\r\nreturn(\r\n\t<div style = {{overflowY:'scroll' , height :'500px' }}>\r\n\t\t{children}\r\n\t</div>\r\n\t);\r\n}\r\n\t\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport Cardlist from '../components/Cardlist.js';\r\nimport {robots} from './robots.js';\r\nimport Search from '../components/Search.js';\r\nimport Scroll from '../components/Scroll.js'\r\nimport './App.css';\r\nclass App extends Component{\r\nconstructor(){\r\n\tsuper();\r\n\tthis.state = {\r\n\t\trobots: robots,\r\n\t\tsearchfield: ''\r\n\t}\r\n}\r\n SearchVal = (event)=>{\r\n\tthis.setState({searchfield: event.target.value})\r\n}\r\nrender(){\r\n\tconst {robots, searchfield} = this.state;\r\n\tconst filterBots = robots.filter(robot => {\r\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t})\r\n\treturn(\r\n\t<div className = 'tc'>\r\n\t\t<h1 className='f1'>RoboFriends</h1>\t\r\n\t\t<Search searchVal = {this.SearchVal}/>\t\r\n\t\t<Scroll>\r\n\t\t<Cardlist robots = {filterBots}/>\r\n\t\t</Scroll>\r\n\t</div>\t\r\n\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(\n\t<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}